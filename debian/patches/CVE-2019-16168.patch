Origin: upstream, https://www.sqlite.org/src/vpatch?from=4f5b2d938194fab7&to=98357d8c1263920b

--- a/src/analyze.c
+++ b/src/analyze.c
@@ -1465,7 +1465,9 @@
     if( sqlite3_strglob("unordered*", z)==0 ){
       pIndex->bUnordered = 1;
     }else if( sqlite3_strglob("sz=[0-9]*", z)==0 ){
-      pIndex->szIdxRow = sqlite3LogEst(sqlite3Atoi(z+3));
+      int sz = sqlite3Atoi(z+3);
+      if( sz<2 ) sz = 2;
+      pIndex->szIdxRow = sqlite3LogEst(sz);
     }
 #ifdef SQLITE_ENABLE_COSTMULT
     else if( sqlite3_strglob("costmult=[0-9]*",z)==0 ){
--- a/src/where.c
+++ b/src/where.c
@@ -4502,6 +4502,7 @@
     ** it to pNew->rRun, which is currently set to the cost of the index
     ** seek only. Then, if this is a non-covering index, add the cost of
     ** visiting the rows in the main table.  */
+    assert( pSrc->pTab->szTabRow>0 );
     rCostIdx = pNew->nOut + 1 + (15*pProbe->szIdxRow)/pSrc->pTab->szTabRow;
     pNew->rRun = sqlite3LogEstAdd(rLogSize, rCostIdx);
     if( (pNew->wsFlags & (WHERE_IDX_ONLY|WHERE_IPK))==0 ){
--- a/test/analyzeC.test
+++ b/test/analyzeC.test
@@ -132,6 +132,20 @@
   SELECT count(a) FROM t1;
 } {/.*INDEX t1ca.*/}
 
+# 2019-08-15.
+# Ticket https://www.sqlite.org/src/tktview/e4598ecbdd18bd82945f602901
+# The sz=N parameter in the sqlite_stat1 table needs to have a value of
+# 2 or more to avoid a division by zero in the query planner.
+#
+do_execsql_test 4.4 {
+  DROP TABLE IF EXISTS t44;
+  CREATE TABLE t44(a PRIMARY KEY);
+  INSERT INTO sqlite_stat1 VALUES('t44',null,'sz=0');
+  ANALYZE sqlite_master;
+  SELECT 0 FROM t44 WHERE a IN(1,2,3);
+} {}
+
+
 
 # The sz=NNN parameter works even if there is other extraneous text
 # in the sqlite_stat1.stat column.
