Description: guard against excessive width and precision in floating-point conversions in the printf routines
 The sqlite3VXPrintf function in printf.c in SQLite before 3.8.9 does not
 properly handle precision and width values during floating-point conversions,
 which allows context-dependent attackers to cause a denial of service
 (integer overflow and stack-based buffer overflow) or possibly have
 unspecified other impact via large integers in a crafted printf function call
 in a SELECT statement.
Bug-Debian: https://bugs.debian.org/783968
Author: D. Richard Hipp
Origin: upstream, http://www.sqlite.org/src/info/c494171f77dc2e5e04cb6d865e688448f04e5920
Last-Update: 2015-05-02

---

--- sqlite3-3.8.7.1.orig/src/printf.c
+++ sqlite3-3.8.7.1/src/printf.c
@@ -462,7 +462,7 @@ void sqlite3VXPrintf(
           else                         prefix = 0;
         }
         if( xtype==etGENERIC && precision>0 ) precision--;
-        for(idx=precision, rounder=0.5; idx>0; idx--, rounder*=0.1){}
+        for(idx=precision&0xfff, rounder=0.5; idx>0; idx--, rounder*=0.1){}
         if( xtype==etFLOAT ) realvalue += rounder;
         /* Normalize realvalue to within 10.0 > realvalue >= 1.0 */
         exp = 0;
@@ -517,8 +517,9 @@ void sqlite3VXPrintf(
         }else{
           e2 = exp;
         }
-        if( MAX(e2,0)+precision+width > etBUFSIZE - 15 ){
-          bufpt = zExtra = sqlite3Malloc( MAX(e2,0)+precision+width+15 );
+        if( MAX(e2,0)+(i64)precision+(i64)width > etBUFSIZE - 15 ){
+          bufpt = zExtra 
+              = sqlite3Malloc( MAX(e2,0)+(i64)precision+(i64)width+15 );
           if( bufpt==0 ){
             setStrAccumError(pAccum, STRACCUM_NOMEM);
             return;
--- sqlite3-3.8.7.1.orig/test/printf.test
+++ sqlite3-3.8.7.1/test/printf.test
@@ -526,6 +526,9 @@ do_test printf-2.1.2.8 {
 do_test printf-2.1.2.9 {
   sqlite3_mprintf_double {abc: %d %d (%1.1g) :xyz} 1 1 1.0e-20
 } {abc: 1 1 (1e-20) :xyz}
+do_test printf-2.1.2.10 {
+  sqlite3_mprintf_double {abc: %*.*f}  2000000000 1000000000 1.0e-20
+} {abc: }
 do_test printf-2.1.3.1 {
   sqlite3_mprintf_double {abc: (%*.*f) :xyz} 1 1 1.0
 } {abc: (1.0) :xyz}
